<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>技术 on 老码识图</title>
        <link>/posts/</link>
        <description>Recent content in 技术 on 老码识图</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Thu, 02 Apr 2020 11:36:23 +0800</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Centos 内核升级</title>
            <link>/posts/2020/04/centos-%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/</link>
            <pubDate>Wed, 08 Apr 2020 10:00:14 +0800</pubDate>
            
            <guid>/posts/2020/04/centos-%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/</guid>
            <description>启用 ELRepo 仓库 ELRepo 仓库是基于社区的用于企业级 Linux 仓库，提供对 RedHat Enterprise (RHEL) 和 其他基于 RHEL的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持。 ELRepo 聚焦于和硬件相关的软件包，包括文件系统驱动、显卡驱动、网络驱动、声卡驱动和摄像头驱动等
导入ELRepo仓库的公共密钥 rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org 安装ELRepo仓库的yum源 rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm 查看可用的系统内核包 yum --disablerepo=&amp;quot;*&amp;quot; --enablerepo=&amp;quot;elrepo-kernel&amp;quot; list available  Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile * elrepo-kernel: mirrors.tuna.tsinghua.edu.cn elrepo-kernel | 2.9 kB 00:00:00 elrepo-kernel/primary_db | 1.9 MB 00:00:01 Available Packages elrepo-release.noarch 7.0-4.el7.elrepo elrepo-kernel kernel-lt.x86_64 4.4.218-1.el7.elrepo elrepo-kernel kernel-lt-devel.x86_64 4.4.218-1.el7.elrepo elrepo-kernel kernel-lt-doc.noarch 4.4.218-1.el7.elrepo elrepo-kernel kernel-lt-headers.x86_64 4.</description>
            <content type="html"><![CDATA[<h1 id="启用-elrepo-仓库">启用 ELRepo 仓库</h1>
<p>ELRepo 仓库是基于社区的用于企业级 Linux 仓库，提供对 RedHat Enterprise (RHEL) 和 其他基于 RHEL的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持。
ELRepo 聚焦于和硬件相关的软件包，包括文件系统驱动、显卡驱动、网络驱动、声卡驱动和摄像头驱动等</p>
<h3 id="导入elrepo仓库的公共密钥">导入ELRepo仓库的公共密钥</h3>
<pre><code>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
</code></pre><h3 id="安装elrepo仓库的yum源">安装ELRepo仓库的yum源</h3>
<pre><code>rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
</code></pre><h1 id="查看可用的系统内核包">查看可用的系统内核包</h1>
<pre><code>yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available
</code></pre>
<pre><code>Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * elrepo-kernel: mirrors.tuna.tsinghua.edu.cn
elrepo-kernel                                                                                                                   | 2.9 kB  00:00:00
elrepo-kernel/primary_db                                                                                                        | 1.9 MB  00:00:01
Available Packages
elrepo-release.noarch                                                      7.0-4.el7.elrepo                                               elrepo-kernel
kernel-lt.x86_64                                                           4.4.218-1.el7.elrepo                                           elrepo-kernel
kernel-lt-devel.x86_64                                                     4.4.218-1.el7.elrepo                                           elrepo-kernel
kernel-lt-doc.noarch                                                       4.4.218-1.el7.elrepo                                           elrepo-kernel
kernel-lt-headers.x86_64                                                   4.4.218-1.el7.elrepo                                           elrepo-kernel
kernel-lt-tools.x86_64                                                     4.4.218-1.el7.elrepo                                           elrepo-kernel
kernel-lt-tools-libs.x86_64                                                4.4.218-1.el7.elrepo                                           elrepo-kernel
kernel-lt-tools-libs-devel.x86_64                                          4.4.218-1.el7.elrepo                                           elrepo-kernel
kernel-ml.x86_64                                                           5.6.2-1.el7.elrepo                                             elrepo-kernel
kernel-ml-devel.x86_64                                                     5.6.2-1.el7.elrepo                                             elrepo-kernel
kernel-ml-doc.noarch                                                       5.6.2-1.el7.elrepo                                             elrepo-kernel
kernel-ml-headers.x86_64                                                   5.6.2-1.el7.elrepo                                             elrepo-kernel
kernel-ml-tools.x86_64                                                     5.6.2-1.el7.elrepo                                             elrepo-kernel
kernel-ml-tools-libs.x86_64                                                5.6.2-1.el7.elrepo                                             elrepo-kernel
kernel-ml-tools-libs-devel.x86_64                                          5.6.2-1.el7.elrepo                                             elrepo-kernel
perf.x86_64                                                                5.6.2-1.el7.elrepo                                             elrepo-kernel
python-perf.x86_64                                                         5.6.2-1.el7.elrepo                                             elrepo-kernel
</code></pre><h1 id="安装需要的内核我用的4稳定版所有选择lt">安装需要的内核，我用的4.+稳定版所有选择lt</h1>
<pre><code>yum --enablerepo=elrepo-kernel install kernel-lt -y
</code></pre>
<h3 id="查看系统可用内核">查看系统可用内核</h3>
<pre><code>cat /boot/grub2/grub.cfg |grep menuentry
</code></pre>
<pre><code>if [ x&quot;${feature_menuentry_id}&quot; = xy ]; then
  menuentry_id_option=&quot;--id&quot;
  menuentry_id_option=&quot;&quot;
export menuentry_id_option
menuentry 'CentOS Linux (4.4.218-1.el7.elrepo.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-957.el7.x86_64-advanced-dad2f04d-8eea-416e-baec-21178a40cec9' {
menuentry 'CentOS Linux (3.10.0-1062.18.1.el7.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-957.el7.x86_64-advanced-dad2f04d-8eea-416e-baec-21178a40cec9' {
menuentry 'CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-957.el7.x86_64-advanced-dad2f04d-8eea-416e-baec-21178a40cec9' {
menuentry 'CentOS Linux (0-rescue-eb97bfa540dd4d02929fe57109e01dd4) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-0-rescue-eb97bfa540dd4d02929fe57109e01dd4-advanced-dad2f04d-8eea-416e-baec-21178a40cec9' {

</code></pre><h3 id="设置启动时默认内核版本">设置启动时默认内核版本</h3>
<pre><code> grub2-set-default 'CentOS Linux (4.4.218-1.el7.elrepo.x86_64) 7 (Core)'  &amp;&amp; reboot
</code></pre>
<h3 id="验证是否生效">验证是否生效</h3>
<pre><code> uname -rs 
</code></pre>
<p>输出如下：</p>
<pre><code>Linux 4.4.218-1.el7.elrepo.x86_64
</code></pre>]]></content>
        </item>
        
        <item>
            <title>aws-sdk-go s3创建bucket失败</title>
            <link>/posts/2020/04/aws-sdk-go-s3%E5%88%9B%E5%BB%BAbucket%E5%A4%B1%E8%B4%A5/</link>
            <pubDate>Sat, 04 Apr 2020 19:57:29 +0800</pubDate>
            
            <guid>/posts/2020/04/aws-sdk-go-s3%E5%88%9B%E5%BB%BAbucket%E5%A4%B1%E8%B4%A5/</guid>
            <description>初次使用aws-sdk-go操作bucket 失败， 之前没接触过s3 api,所以copy官方demo ，最后发现死活不成功;不成功的原因在于，创建bucket的时候一定要加&amp;rdquo;/&amp;rdquo; 作为前缀，不然bucket name会拼接到endpoint上,并作为http 头信息host参数，使得dns无法解析，具体原因就自己看源码吧，个人觉得源码写的太绕了，花式太多，不简洁所以没耐力看完，仅此记录一下避免以后再出现;
Error:
---[ REQUEST POST-SIGN ]----------------------------- PUT / HTTP/1.1 Host: newbucket2.ceph.local:31043 User-Agent: aws-sdk-go/1.30.0 (go1.14.1; darwin; amd64) Content-Length: 144 Authorization: AWS4-HMAC-SHA256 Credential=AV3EEKF9Z4HIYS3H8TNJ/20200404/default/s3/aws4_request, SignedHeaders=content-length;host;x-amz-content-sha256;x-amz-date, Signature=c62d346c7743a24767e70f4dd536638c82df7fec48dddf9a3eb357aad1134064 X-Amz-Content-Sha256: fb7447c319d3516fbae452bf0ca6e8895c347ef39fff2272588b53c0731f5bc1 X-Amz-Date: 20200404T122704Z Accept-Encoding: gzip RequestError: send request failed caused by: Put &amp;quot;http://newbucket2.ceph.local:31043/&amp;quot;: dial tcp: i/o timeout 正确请求构造:
input := &amp;amp;s3.CreateBucketInput{Bucket: aws.String(&amp;quot;/newbucket2&amp;rdquo;)}
官方demo 如下:
 sess := session.Must(session.NewSessionWithOptions(session.Options{ Config: aws.Config{ Region: aws.String(&amp;quot;default&amp;quot;), LogLevel: &amp;amp;x, DisableSSL: aws.Bool(true), Credentials: credentials.NewStaticCredentials(&amp;quot;AV3EEKF9Z4HIYS3H8TNJ&amp;quot;, &amp;quot;hXpDkmR7LSdVgBSm6FsHubhCflKrlEYRTTuNCKLO&amp;quot;, &amp;quot;&amp;quot;), Endpoint: aws.</description>
            <content type="html"><![CDATA[<p>  初次使用aws-sdk-go操作bucket 失败， 之前没接触过s3 api,所以copy官方demo ，最后发现死活不成功;不成功的原因在于，创建bucket的时候一定要加&rdquo;/&rdquo; 作为前缀，不然bucket  name会拼接到endpoint上,并作为http 头信息host参数，使得dns无法解析，具体原因就自己看源码吧，个人觉得源码写的太绕了，花式太多，不简洁所以没耐力看完，仅此记录一下避免以后再出现;</p>
<p>Error:</p>
<pre><code>---[ REQUEST POST-SIGN ]-----------------------------
PUT / HTTP/1.1
Host: newbucket2.ceph.local:31043
User-Agent: aws-sdk-go/1.30.0 (go1.14.1; darwin; amd64)
Content-Length: 144
Authorization: AWS4-HMAC-SHA256 Credential=AV3EEKF9Z4HIYS3H8TNJ/20200404/default/s3/aws4_request, SignedHeaders=content-length;host;x-amz-content-sha256;x-amz-date, Signature=c62d346c7743a24767e70f4dd536638c82df7fec48dddf9a3eb357aad1134064
X-Amz-Content-Sha256: fb7447c319d3516fbae452bf0ca6e8895c347ef39fff2272588b53c0731f5bc1
X-Amz-Date: 20200404T122704Z
Accept-Encoding: gzip

RequestError: send request failed
caused by: Put &quot;http://newbucket2.ceph.local:31043/&quot;: dial tcp: i/o timeout

</code></pre><p>正确请求构造:</p>
<p><strong>input := &amp;s3.CreateBucketInput{Bucket: aws.String(&quot;/newbucket2&rdquo;)}</strong></p>
<p>官方demo 如下:</p>
<pre><code>       sess := session.Must(session.NewSessionWithOptions(session.Options{
                Config: aws.Config{
                        Region:      aws.String(&quot;default&quot;),
                        LogLevel:    &amp;x,
                        DisableSSL:  aws.Bool(true),
                        Credentials: credentials.NewStaticCredentials(&quot;AV3EEKF9Z4HIYS3H8TNJ&quot;, &quot;hXpDkmR7LSdVgBSm6FsHubhCflKrlEYRTTuNCKLO&quot;, &quot;&quot;),
                        Endpoint:    aws.String(&quot;ceph.local:31043&quot;),
                },
        }))
        svc := s3.New(sess)

        input := &amp;s3.CreateBucketInput{
                Bucket: aws.String(&quot;newbucket2&quot;),
                CreateBucketConfiguration: &amp;s3.CreateBucketConfiguration{LocationConstraint: aws.String(&quot;&quot;)},
        }

        // Create the S3 service client with the shared session. This will
        // automatically use the S3 custom endpoint configured in the custom
        // endpoint resolver wrapping the default endpoint resolver.
            result, err := svc.CreateBucket(input)
        if err != nil {
                if aerr, ok := err.(awserr.Error); ok {
                        switch aerr.Code() {
                        case s3.ErrCodeBucketAlreadyExists:
                                fmt.Println(s3.ErrCodeBucketAlreadyExists, aerr.Error())
                        case s3.ErrCodeBucketAlreadyOwnedByYou:
                                fmt.Println(s3.ErrCodeBucketAlreadyOwnedByYou, aerr.Error())
                        default:
                                fmt.Println(aerr.Error())
                        }
                } else {
                        // Print the error, cast err to awserr.Error to get the Code and
                        // Message from an error.
                        fmt.Println(err.Error())
                }
                return
        }
</code></pre>]]></content>
        </item>
        
        <item>
            <title>CURL FTP 操作</title>
            <link>/posts/2020/04/curl-ftp-%E6%93%8D%E4%BD%9C/</link>
            <pubDate>Fri, 03 Apr 2020 23:30:19 +0800</pubDate>
            
            <guid>/posts/2020/04/curl-ftp-%E6%93%8D%E4%BD%9C/</guid>
            <description> 使用ftp 服务时不想下载ftp客户端操作的时候，可以利用curl达到相同的目的；
文件上传 curl –u username:password -T target.zip ftp://ip:port/target.zip 文件下载 curl –u username:password ftp://ip:port/target.zip -o target.zip 文件删除 curl –u username:password ftp://ip:port/target.zip -Q &#39;DELE target.zip&#39; </description>
            <content type="html"><![CDATA[<p>    使用ftp 服务时不想下载ftp客户端操作的时候，可以利用curl达到相同的目的；</p>
<h3 id="文件上传">文件上传</h3>
<pre><code>curl –u username:password -T target.zip ftp://ip:port/target.zip
</code></pre><h3 id="文件下载">文件下载</h3>
<pre><code>curl –u username:password ftp://ip:port/target.zip  -o target.zip
</code></pre><h3 id="文件删除">文件删除</h3>
<pre><code>curl –u username:password ftp://ip:port/target.zip -Q 'DELE target.zip'
</code></pre>]]></content>
        </item>
        
        <item>
            <title>SSH跳板设置</title>
            <link>/posts/2020/04/ssh%E8%B7%B3%E6%9D%BF%E8%AE%BE%E7%BD%AE/</link>
            <pubDate>Fri, 03 Apr 2020 21:14:01 +0800</pubDate>
            
            <guid>/posts/2020/04/ssh%E8%B7%B3%E6%9D%BF%E8%AE%BE%E7%BD%AE/</guid>
            <description>ssh通过代理服务器登陆远程主机
SSH跳板 在远程主机不可以直接访问的时候，可以通过可以访问的一个中间服务器作为跳板直接访问后端服务器;
ssh -o &amp;quot;ProxyCommand ssh -p 22 root@proxy.machine nc -w 1 %h %p&amp;quot; -p 22 root@target.machine SCP远程拷贝 在远程主机无法直接访问的时候，可以通过代理服务器来达到重远程服务器下载文件;
* 重远程机拷贝到本地 scp -o &amp;quot;ProxyCommand ssh -p 22 root@proxy.machine nc -w 1 %h %p&amp;quot; -P 22 -r lmx@target.machine:~/targetFile . * 本地拷贝目标机器 scp -o &amp;quot;ProxyCommand ssh -p 22 root@proxy.machine nc -w 1 %h %p&amp;quot; -P 22 -r targetFile lmx@target.machine:~ </description>
            <content type="html"><![CDATA[<p>ssh通过代理服务器登陆远程主机</p>
<h3 id="ssh跳板">SSH跳板</h3>
<p>在远程主机不可以直接访问的时候，可以通过可以访问的一个中间服务器作为跳板直接访问后端服务器;</p>
<pre><code>ssh -o &quot;ProxyCommand ssh -p 22 root@proxy.machine nc -w 1 %h %p&quot; -p 22 root@target.machine
</code></pre><h3 id="scp远程拷贝">SCP远程拷贝</h3>
<p>在远程主机无法直接访问的时候，可以通过代理服务器来达到重远程服务器下载文件;</p>
<pre><code>* 重远程机拷贝到本地  
scp -o &quot;ProxyCommand ssh -p 22 root@proxy.machine nc -w 1 %h %p&quot; -P 22 -r lmx@target.machine:~/targetFile .
* 本地拷贝目标机器  
scp -o &quot;ProxyCommand ssh -p 22 root@proxy.machine nc -w 1 %h %p&quot; -P 22 -r targetFile lmx@target.machine:~
</code></pre>]]></content>
        </item>
        
    </channel>
</rss>
